decl
    int tok_INTEGER_LITERAL;
    int tok_STRING_LITERAL;
    int tok_IDENTIFIER;
    int tok_INT;
    int tok_STR;
    int tok_DECL;
    int tok_ENDDECL;
    int tok_BEGIN;
    int tok_END;
    int tok_READ;
    int tok_WRITE;
    int tok_IF;
    int tok_THEN;
    int tok_ELSE;
    int tok_ELIF;
    int tok_ENDIF;
    int tok_WHILE;
    int tok_DO;
    int tok_ENDWHILE;
    int tok_BREAK;
    int tok_CONTINUE;
    int tok_RETURN;
    int tok_AND;
    int tok_OR;
    int tok_LT;
    int tok_GT;
    int tok_LT_EQ;
    int tok_GT_EQ;
    int tok_EQUAL_EQ;
    int tok_NOT_EQ;
    int tok_EQ;
    int tok_PLUS;
    int tok_MINUS;
    int tok_MUL;
    int tok_DIV;
    int tok_MOD;
    int tok_ADDR_OF;

    int enumeration;
    int iota();
    int inititalize_token_values();
    str token_to_str(int token);

    // external functions
    int write_int(int x);
    int write_str(str s);
    int read_int(int *x);
enddecl

int iota()
{
    decl enddecl
    begin
        enumeration = enumeration + 1;
        return enumeration;
    end
}

int inititalize_token_values()
{
    decl enddecl
    begin
        enumeration = 0;
        tok_INTEGER_LITERAL = iota();
        tok_STRING_LITERAL = iota();
        tok_IDENTIFIER = iota();
        tok_INT = iota();
        tok_STR = iota();
        tok_DECL = iota();
        tok_ENDDECL = iota();
        tok_BEGIN = iota();
        tok_END = iota();
        tok_READ = iota();
        tok_WRITE = iota();
        tok_IF = iota();
        tok_THEN = iota();
        tok_ELSE = iota();
        tok_ELIF = iota();
        tok_ENDIF = iota();
        tok_WHILE = iota();
        tok_DO = iota();
        tok_ENDWHILE = iota();
        tok_BREAK = iota();
        tok_CONTINUE = iota();
        tok_RETURN = iota();
        tok_AND = iota();
        tok_OR = iota();
        tok_LT = iota();
        tok_GT = iota();
        tok_LT_EQ = iota();
        tok_GT_EQ = iota();
        tok_EQUAL_EQ = iota();
        tok_NOT_EQ = iota();
        tok_EQ = iota();
        tok_PLUS = iota();
        tok_MINUS = iota();
        tok_MUL = iota();
        tok_DIV = iota();
        tok_MOD = iota();
        tok_ADDR_OF = iota();
        return 0;
    end
}

str token_to_str(int token)
{
    decl str result; enddecl
    begin
        if (token == tok_INTEGER_LITERAL) then result = "int_literal";
        elif (token == tok_STRING_LITERAL) then result = "str_literal";
        elif (token == tok_IDENTIFIER) then result = "identifier";
        elif (token == tok_INT) then result = "int";
        elif (token == tok_STR) then result = "str";
        elif (token == tok_DECL) then result = "decl";
        elif (token == tok_ENDDECL) then result = "enddecl";
        elif (token == tok_BEGIN) then result = "begin";
        elif (token == tok_END) then result = "end";
        elif (token == tok_READ) then result = "read";
        elif (token == tok_WRITE) then result = "write";
        elif (token == tok_IF) then result = "if";
        elif (token == tok_THEN) then result = "then";
        elif (token == tok_ELSE) then result = "else";
        elif (token == tok_ELIF) then result = "elif";
        elif (token == tok_ENDIF) then result = "endif";
        elif (token == tok_WHILE) then result = "while";
        elif (token == tok_DO) then result = "do";
        elif (token == tok_ENDWHILE) then result = "endwhile";
        elif (token == tok_BREAK) then result = "break";
        elif (token == tok_CONTINUE) then result = "continue";
        elif (token == tok_RETURN) then result = "return";
        elif (token == tok_AND) then result = "and";
        elif (token == tok_OR) then result = "or";
        elif (token == tok_LT) then result = "lt";
        elif (token == tok_GT) then result = "gt";
        elif (token == tok_LT_EQ) then result = "lt_eq";
        elif (token == tok_GT_EQ) then result = "gt_eq";
        elif (token == tok_EQUAL_EQ) then result = "equal_eq";
        elif (token == tok_NOT_EQ) then result = "not_eq";
        elif (token == tok_EQ) then result = "eq";
        elif (token == tok_PLUS) then result = "plus";
        elif (token == tok_MINUS) then result = "minus";
        elif (token == tok_MUL) then result = "mul";
        elif (token == tok_DIV) then result = "div";
        elif (token == tok_MOD) then result = "mod";
        elif (token == tok_ADDR_OF) then result = "addr_of";
        else result = "unkown_token";
        endif;
        return result;
    end
}

int main()
{
    decl int n; int _; enddecl
    begin
        _ = inititalize_token_values();
        _ = write_int(enumeration);
        n = 1;
        while (n <= enumeration) do
            _ = write_str(token_to_str(n));
            _ = write_str("\n");
            n = n + 1;
        endwhile;
        return 0;
    end
}